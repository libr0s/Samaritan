'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _grade = require('./grade');

var _grade2 = _interopRequireDefault(_grade);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _style = require('./style');

var _RelativeTimeFormat = require('./RelativeTimeFormat');

var _RelativeTimeFormat2 = _interopRequireDefault(_RelativeTimeFormat);

var _LocaleDataStore = require('./LocaleDataStore');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JavascriptTimeAgo = function () {
	/**
  * @param {(string|string[])} locales=[] - Preferred locales (or locale).
  */
	function JavascriptTimeAgo() {
		var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

		_classCallCheck(this, JavascriptTimeAgo);

		// Convert `locales` to an array.
		if (typeof locales === 'string') {
			locales = [locales];
		}

		// Choose the most appropriate locale
		// (one of the previously added ones)
		// based on the list of preferred `locales` supplied by the user.
		this.locale = (0, _locale2.default)(locales.concat((0, _LocaleDataStore.getDefaultLocale)()), _LocaleDataStore.isLocaleDataAvailable);
	}

	// Formats the relative date/time.
	//
	// @return {string} Returns the formatted relative date/time.
	//
	// @param {(Object|string)} [style] - Relative date/time formatting style.
	//
	// @param {string[]} [style.units] - A list of allowed time units
	//                                  (e.g. ['second', 'minute', 'hour', …])
	//
	// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.
	//                                    If this function returns a value, then
	//                                    the `.format()` call will return that value.
	//                                    Otherwise it has no effect.
	//
	// @param {string} [style.flavour] - e.g. "long", "short", "tiny", etc.
	//
	// @param {Object[]} [style.gradation] - Time scale gradation steps.
	//
	// @param {string} style.gradation[].unit - Time interval measurement unit.
	//                                          (e.g. ['second', 'minute', 'hour', …])
	//
	// @param {Number} style.gradation[].factor - Time interval measurement unit factor.
	//                                            (e.g. `60` for 'minute')
	//
	// @param {Number} [style.gradation[].granularity] - A step for the unit's "amount" value.
	//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)
	//
	// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.
	//                                                 (e.g. `45` seconds for 'minute').
	//                                                 There can also be specific `threshold_[unit]`
	//                                                 thresholds for fine-tuning.
	//


	_createClass(JavascriptTimeAgo, [{
		key: 'format',
		value: function format(input) {
			var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _style.defaultStyle;

			if (typeof style === 'string') {
				switch (style) {
					case 'twitter':
						style = _style.twitterStyle;
						break;
					case 'time':
						style = _style.timeStyle;
						break;
					default:
						style = _style.defaultStyle;
				}
			}

			var _getDateAndTimeBeingF = getDateAndTimeBeingFormatted(input),
			    date = _getDateAndTimeBeingF.date,
			    time = _getDateAndTimeBeingF.time;

			// Get locale messages for this formatting flavour


			var _getLocaleData2 = this.getLocaleData(style.flavour),
			    flavour = _getLocaleData2.flavour,
			    localeData = _getLocaleData2.localeData;

			// Can pass a custom `now`, e.g. for testing purposes.
			// Technically it doesn't belong to `style`
			// but since this is an undocumented internal feature,
			// taking it from the `style` argument will do (for now).


			var now = style.now || Date.now();

			// how much time elapsed (in seconds)
			var elapsed = (now - time) / 1000; // in seconds

			// `custom` – A function of `{ elapsed, time, date, now, locale }`.
			// If this function returns a value, then the `.format()` call will return that value.
			// Otherwise the relative date/time is formatted as usual.
			// This feature is currently not used anywhere and is here
			// just for providing the ultimate customization point
			// in case anyone would ever need that. Prefer using
			// `gradation[step].format(value, locale)` instead.
			//
			// I guess `custom` is deprecated and will be removed
			// in some future major version release.
			//
			if (style.custom) {
				var custom = style.custom({
					now: now,
					date: date,
					time: time,
					elapsed: elapsed,
					locale: this.locale
				});

				if (custom !== undefined) {
					return custom;
				}
			}

			// Available time interval measurement units.
			var units = getTimeIntervalMeasurementUnits(localeData, style.units);

			// If no available time unit is suitable, just output an empty string.
			if (units.length === 0) {
				console.error('Units "' + units.join(', ') + '" were not found in locale data for "' + this.locale + '".');
				return '';
			}

			// Choose the appropriate time measurement unit
			// and get the corresponding rounded time amount.
			var step = (0, _grade2.default)(Math.abs(elapsed), now, units, style.gradation);

			// If no time unit is suitable, just output an empty string.
			// E.g. when "now" unit is not available
			// and "second" has a threshold of `0.5`
			// (e.g. the "canonical" grading scale).
			if (!step) {
				return '';
			}

			if (step.format) {
				return step.format(date || time, this.locale);
			}

			var unit = step.unit,
			    factor = step.factor,
			    granularity = step.granularity;


			var amount = Math.abs(elapsed) / factor;

			// Apply granularity to the time amount
			// (and fallback to the previous step
			//  if the first level of granularity
			//  isn't met by this amount)
			if (granularity) {
				// Recalculate the elapsed time amount based on granularity
				amount = Math.round(amount / granularity) * granularity;
			}

			// Format the time elapsed.
			// Using `Intl.RelativeTimeFormat` proposal polyfill.
			//
			// TODO: Should cache `Intl.RelativeTimeFormat` instances
			// for given `this.locale` and `flavour`.
			//
			// ```js
			// import Cache from './cache'
			// const cache = new Cache()
			// const formatter = this.cache.get(this.locale, flavour) ||
			//   this.cache.put(this.locale, flavour, new Intl.RelativeTimeFormat(...))
			// return formatter.format(...)
			// ```
			//
			return new _RelativeTimeFormat2.default(this.locale, { style: flavour }).format(-1 * Math.sign(elapsed) * Math.round(amount), unit);
		}

		/**
   * Gets locale messages for this formatting flavour
   *
   * @param {(string|string[])} flavour - Relative date/time formatting flavour.
   *                                      If it's an array then all flavours are tried in order.
   *
   * @returns {Object} Returns an object of shape { flavour, localeData }
   */

	}, {
		key: 'getLocaleData',
		value: function getLocaleData() {
			var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

			// Get relative time formatting rules for this locale
			var localeData = (0, _LocaleDataStore.getLocaleData)(this.locale);

			// Convert `flavour` to an array.
			if (typeof flavour === 'string') {
				flavour = [flavour];
			}

			// "long" flavour is the default one.
			// (it's always present)
			flavour = flavour.concat('long');

			// Find a suitable flavour.
			for (var _iterator = flavour, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var _ = _ref;

				if (localeData[_]) {
					return {
						flavour: _,
						localeData: localeData[_]
					};
				}
			}

			// Can't happen - "long" flavour is always present.
			// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale "${this.locale}".`)
		}
	}]);

	return JavascriptTimeAgo;
}();

/**
 * Gets default locale.
 * @return  {string} locale
 */


exports.default = JavascriptTimeAgo;
JavascriptTimeAgo.getDefaultLocale = _LocaleDataStore.getDefaultLocale;

/**
 * Sets default locale.
 * @param  {string} locale
 */
JavascriptTimeAgo.setDefaultLocale = _LocaleDataStore.setDefaultLocale;

/**
 * Adds locale data for a specific locale.
 * @param {Object} localeData
 */
JavascriptTimeAgo.addLocale = _LocaleDataStore.addLocaleData;

/**
 * (legacy alias)
 * Adds locale data for a specific locale.
 * @param {Object} localeData
 * @deprecated
 */
JavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale;

// Normalizes `.format()` `time` argument.
function getDateAndTimeBeingFormatted(input) {
	if (input.constructor === Date) {
		return {
			date: input,
			time: input.getTime()
		};
	}

	if (typeof input === 'number') {
		return {
			time: input
			// `date` is not required for formatting
			// relative times unless "twitter" preset is used.
			// date : new Date(input)
		};
	}

	// For some weird reason istanbul doesn't see this `throw` covered.
	/* istanbul ignore next */
	throw new Error('Unsupported relative time formatter input: ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input)) + ', ' + input);
}

// Get available time interval measurement units.
function getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits) {
	// All available time interval measurement units.
	var units = Object.keys(localeData);

	// If only a specific set of available
	// time measurement units can be used.
	if (restrictedSetOfUnits) {
		// Reduce available time interval measurement units
		// based on user's preferences.
		return restrictedSetOfUnits.filter(function (_) {
			return units.indexOf(_) >= 0;
		});
	}

	return units;
}
//# sourceMappingURL=JavascriptTimeAgo.js.map