{"version":3,"sources":["../source/JavascriptTimeAgo.js"],"names":["JavascriptTimeAgo","locales","locale","concat","input","style","getDateAndTimeBeingFormatted","date","time","getLocaleData","flavour","localeData","now","Date","elapsed","custom","undefined","units","getTimeIntervalMeasurementUnits","length","console","error","join","step","Math","abs","gradation","format","unit","factor","granularity","amount","round","sign","_","getDefaultLocale","setDefaultLocale","addLocale","constructor","getTime","Error","restrictedSetOfUnits","Object","keys","filter","indexOf"],"mappings":"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","file":"JavascriptTimeAgo.js","sourcesContent":["import grade from './grade'\r\nimport chooseLocale from './locale'\r\nimport { twitterStyle, timeStyle, defaultStyle } from './style'\r\n\r\nimport RelativeTimeFormat from './RelativeTimeFormat'\r\n\r\nimport {\r\n\tgetDefaultLocale,\r\n\tsetDefaultLocale,\r\n\tgetLocaleData,\r\n\taddLocaleData,\r\n\tisLocaleDataAvailable\r\n} from './LocaleDataStore'\r\n\r\nexport default class JavascriptTimeAgo\r\n{\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t */\r\n\tconstructor(locales = [])\r\n\t{\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// (one of the previously added ones)\r\n\t\t// based on the list of preferred `locales` supplied by the user.\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(getDefaultLocale()),\r\n\t\t\tisLocaleDataAvailable\r\n\t\t)\r\n\t}\r\n\r\n\t// Formats the relative date/time.\r\n\t//\r\n\t// @return {string} Returns the formatted relative date/time.\r\n\t//\r\n\t// @param {(Object|string)} [style] - Relative date/time formatting style.\r\n\t//\r\n\t// @param {string[]} [style.units] - A list of allowed time units\r\n\t//                                  (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\r\n\t//                                    If this function returns a value, then\r\n\t//                                    the `.format()` call will return that value.\r\n\t//                                    Otherwise it has no effect.\r\n\t//\r\n\t// @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\r\n\t//\r\n\t// @param {Object[]} [style.gradation] - Time scale gradation steps.\r\n\t//\r\n\t// @param {string} style.gradation[].unit - Time interval measurement unit.\r\n\t//                                          (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Number} style.gradation[].factor - Time interval measurement unit factor.\r\n\t//                                            (e.g. `60` for 'minute')\r\n\t//\r\n\t// @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\r\n\t//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\r\n\t//\r\n\t// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\r\n\t//                                                 (e.g. `45` seconds for 'minute').\r\n\t//                                                 There can also be specific `threshold_[unit]`\r\n\t//                                                 thresholds for fine-tuning.\r\n\t//\r\n\tformat(input, style = defaultStyle)\r\n\t{\r\n\t\tif (typeof style === 'string')\r\n\t\t{\r\n\t\t\tswitch (style)\r\n\t\t\t{\r\n\t\t\t\tcase 'twitter':\r\n\t\t\t\t\tstyle = twitterStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'time':\r\n\t\t\t\t\tstyle = timeStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstyle = defaultStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { date, time } = getDateAndTimeBeingFormatted(input)\r\n\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, localeData } = this.getLocaleData(style.flavour)\r\n\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t// Technically it doesn't belong to `style`\r\n\t\t// but since this is an undocumented internal feature,\r\n\t\t// taking it from the `style` argument will do (for now).\r\n\t\tconst now = style.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `gradation[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\t// I guess `custom` is deprecated and will be removed\r\n\t\t// in some future major version release.\r\n\t\t//\r\n\t\tif (style.custom)\r\n\t\t{\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate,\r\n\t\t\t\ttime,\r\n\t\t\t\telapsed,\r\n\t\t\t\tlocale : this.locale\r\n\t\t\t})\r\n\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(localeData, style.units)\r\n\r\n\t\t// If no available time unit is suitable, just output an empty string.\r\n\t\tif (units.length === 0) {\r\n\t\t\tconsole.error(`Units \"${units.join(', ')}\" were not found in locale data for \"${this.locale}\".`)\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst step = grade(\r\n\t\t\tMath.abs(elapsed),\r\n\t\t\tnow,\r\n\t\t\tunits,\r\n\t\t\tstyle.gradation\r\n\t\t)\r\n\r\n\t\t// If no time unit is suitable, just output an empty string.\r\n\t\t// E.g. when \"now\" unit is not available\r\n\t\t// and \"second\" has a threshold of `0.5`\r\n\t\t// (e.g. the \"canonical\" grading scale).\r\n\t\tif (!step) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(date || time, this.locale)\r\n\t\t}\r\n\r\n\t\tconst { unit, factor, granularity } = step\r\n\r\n\t\tlet amount = Math.abs(elapsed) / factor\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\tif (granularity) {\r\n\t\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\t\tamount = Math.round(amount / granularity) * granularity\r\n\t\t}\r\n\r\n\t\t// Format the time elapsed.\r\n\t\t// Using `Intl.RelativeTimeFormat` proposal polyfill.\r\n\t\t//\r\n\t\t// TODO: Should cache `Intl.RelativeTimeFormat` instances\r\n\t\t// for given `this.locale` and `flavour`.\r\n\t\t//\r\n\t\t// ```js\r\n\t\t// import Cache from './cache'\r\n\t\t// const cache = new Cache()\r\n\t\t// const formatter = this.cache.get(this.locale, flavour) ||\r\n\t\t//   this.cache.put(this.locale, flavour, new Intl.RelativeTimeFormat(...))\r\n\t\t// return formatter.format(...)\r\n\t\t// ```\r\n\t\t//\r\n\t\treturn new RelativeTimeFormat(this.locale, { style: flavour })\r\n\t\t\t.format(-1 * Math.sign(elapsed) * Math.round(amount), unit)\r\n\t}\r\n\r\n\t/**\r\n\t * Gets locale messages for this formatting flavour\r\n\t *\r\n\t * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n\t *                                      If it's an array then all flavours are tried in order.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { flavour, localeData }\r\n\t */\r\n\tgetLocaleData(flavour = [])\r\n\t{\r\n\t\t// Get relative time formatting rules for this locale\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\r\n\t\t// Convert `flavour` to an array.\r\n\t\tif (typeof flavour === 'string')\r\n\t\t{\r\n\t\t\tflavour = [flavour]\r\n\t\t}\r\n\r\n\t\t// \"long\" flavour is the default one.\r\n\t\t// (it's always present)\r\n\t\tflavour = flavour.concat('long')\r\n\r\n\t\t// Find a suitable flavour.\r\n\t\tfor (const _ of flavour) {\r\n\t\t\tif (localeData[_]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tflavour : _,\r\n\t\t\t\t\tlocaleData : localeData[_]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Can't happen - \"long\" flavour is always present.\r\n\t\t// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nJavascriptTimeAgo.getDefaultLocale = getDefaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nJavascriptTimeAgo.setDefaultLocale = setDefaultLocale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nJavascriptTimeAgo.addLocale = addLocaleData\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getDateAndTimeBeingFormatted(input)\r\n{\r\n\tif (input.constructor === Date)\r\n\t{\r\n\t\treturn {\r\n\t\t\tdate : input,\r\n\t\t\ttime : input.getTime()\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof input === 'number')\r\n\t{\r\n\t\treturn {\r\n\t\t\ttime : input,\r\n\t\t\t// `date` is not required for formatting\r\n\t\t\t// relative times unless \"twitter\" preset is used.\r\n\t\t\t// date : new Date(input)\r\n\t\t}\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits)\r\n{\r\n\t// All available time interval measurement units.\r\n\tconst units = Object.keys(localeData)\r\n\r\n\t// If only a specific set of available\r\n\t// time measurement units can be used.\r\n\tif (restrictedSetOfUnits) {\r\n\t\t// Reduce available time interval measurement units\r\n\t\t// based on user's preferences.\r\n\t\treturn restrictedSetOfUnits.filter(_ => units.indexOf(_) >= 0)\r\n\t}\r\n\r\n\treturn units\r\n}"]}