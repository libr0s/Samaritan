{"version":3,"sources":["../source/TextInput.js"],"names":["PureComponent","Component","TextInput","state","storeInputNode","node","input","focus","onFocus","props","event","setState","isFocused","onBlur","indicateInvalid","error","style","className","password","email","rest","type","propTypes","label","string","name","value","oneOfType","number","onChange","func","isRequired","inputComponent","disabled","bool","required","placeholder","multiline","tabIndex","rows","cols","onKeyDown","onClick","object","inputStyle","defaultProps"],"mappings":"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","file":"TextInput.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport Input from './TextInputComponent'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nexport default class TextInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Text field label\r\n\t\tlabel            : PropTypes.string,\r\n\r\n\t\t// HTML form input `name` attribute\r\n\t\tname             : PropTypes.string,\r\n\r\n\t\t// Text field value\r\n\t\tvalue            : PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n\t\t// Is called when the `value` is edited\r\n\t\tonChange         : PropTypes.func.isRequired,\r\n\r\n\t\t// A custom input component.\r\n\t\tinputComponent   : PropTypes.oneOfType\r\n\t\t([\r\n\t\t\tPropTypes.func,\r\n\t\t\tPropTypes.string\r\n\t\t]),\r\n\r\n\t\t// Disables the text field\r\n\t\tdisabled         : PropTypes.bool,\r\n\r\n\t\t// Renders an error message below the `<input/>`\r\n\t\terror            : PropTypes.string,\r\n\r\n\t\t// If this flag is `true` then the `error` is shown.\r\n\t\t// If this flag is `false` then the `error` is not shown (even if passed).\r\n\t\tindicateInvalid  : PropTypes.bool,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired         : PropTypes.bool,\r\n\r\n\t\t// `<input/>` placeholder\r\n\t\tplaceholder      : PropTypes.string,\r\n\r\n\t\t// `<textarea/>` instead of an `<input type=\"text\"/>`\r\n\t\tmultiline        : PropTypes.bool,\r\n\r\n\t\t// Deprecated.\r\n\t\t// Use `type=\"email\"` instead.\r\n\t\t// Sets HTML input `type` attribute to `email`\r\n\t\temail            : PropTypes.bool,\r\n\r\n\t\t// Deprecated.\r\n\t\t// Use `type=\"password\"` instead.\r\n\t\t// Sets HTML input `type` attribute to `password`\r\n\t\tpassword         : PropTypes.bool,\r\n\r\n\t\t// Autofocuses the input field\r\n\t\tfocus            : PropTypes.bool,\r\n\r\n\t\t// HTML `tabindex` attribute\r\n\t\ttabIndex         : PropTypes.number,\r\n\r\n\t\t// `<textarea/>` `rows` attribute (row count, i.e. height)\r\n\t\trows             : PropTypes.number,\r\n\r\n\t\t// `<textarea/>` `cols` attribute (column count, i.e. width)\r\n\t\tcols             : PropTypes.number,\r\n\r\n\t\t// Is called when the input is focused\r\n\t\tonFocus          : PropTypes.func,\r\n\r\n\t\t// `onKeyDown` event handler\r\n\t\tonKeyDown        : PropTypes.func,\r\n\r\n\t\t// Is called when the input is blurred\r\n\t\tonBlur           : PropTypes.func,\r\n\r\n\t\t// Is called when the input is clicked\r\n\t\tonClick           : PropTypes.func,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle            : PropTypes.object,\r\n\r\n\t\t// CSS name\r\n\t\tclassName        : PropTypes.string,\r\n\r\n\t\t// CSS style object for `<input/>`\r\n\t\tinputStyle       : PropTypes.object\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// Show `error` (if passed).\r\n\t\tindicateInvalid : true\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\tstoreInputNode = (node) => this.input = node\r\n\r\n\tfocus = () => this.input.focus()\r\n\r\n\tonFocus = () => {\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t\tthis.setState({ isFocused: true })\r\n\t}\r\n\r\n\tonBlur = () => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n   \tthis.setState({ isFocused: false })\r\n   }\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tindicateInvalid,\r\n\t\t\terror,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\t// Deprecated.\r\n\t\t\t// Use `type=\"password\"` instead.\r\n\t\t\tpassword,\r\n\t\t\t// Deprecated.\r\n\t\t\t// Use `type=\"email\"` instead.\r\n\t\t\temail,\r\n\t\t\t...rest\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { isFocused } = this.state\r\n\r\n\t\t// Deprecated.\r\n\t\t// Use `type=\"password\"` instead.\r\n\t\tif (password) {\r\n\t\t\trest.type = 'password'\r\n\t\t}\r\n\r\n\t\t// Deprecated.\r\n\t\t// Use `type=\"email\"` instead.\r\n\t\tif (email) {\r\n\t\t\trest.type = 'email'\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\t'rrui__text-input',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__text-input--focus': isFocused\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\r\n\t\t\t\t<Input\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tinputRef={this.storeInputNode}\r\n\t\t\t\t\terror={error}\r\n\t\t\t\t\tindicateInvalid={indicateInvalid}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur} />\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ indicateInvalid && error &&\r\n\t\t\t\t\t<div className=\"rrui__input-error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\t// render_static()\r\n\t// {\r\n\t// \tconst { label } = this.props\r\n\t//\r\n\t// \treturn (\r\n\t// \t\t<div className=\"rrui__rich__fallback\">\r\n\t// \t\t\t<Input {...this.props} placeholder={label} />\r\n\t// \t\t</div>\r\n\t// \t)\r\n\t// }\r\n}"]}