{"version":3,"sources":["../source/verboseDateFormatter.js"],"names":["intlDateTimeFormatSupported","intlDateTimeFormatSupportedLocale","Cache","cache","createVerboseDateFormatter","locales","format","date","toString","locale","formatFingerprint","JSON","stringify","formatter","get","String","put","Intl","DateTimeFormat"],"mappings":"AAAA,SAECA,2BAFD,EAGCC,iCAHD,QAKK,qBALL;;AAOA,OAAOC,KAAP,MAAkB,2BAAlB;;AAEA,IAAMC,QAAQ,IAAID,KAAJ,EAAd;;AAEA;;;;;;;;;;;;;;;AAeA,eAAe,SAASE,0BAAT,CAAoCC,OAApC,EAA6CC,MAA7C,EACf;AACC;AACA;AACA,KAAI,CAACN,6BAAL,EACA;AACC,SAAO;AAAA,UAAQO,KAAKC,QAAL,EAAR;AAAA,GAAP;AACA;;AAED;AACA;AACA,KAAMC,SAASR,kCAAkCI,OAAlC,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAMK,oBAAoBC,KAAKC,SAAL,CAAeN,MAAf,CAA1B;;AAEA;AACA;AACA,KAAMO,YAAYV,MAAMW,GAAN,CAAUC,OAAON,MAAP,CAAV,EAA0BC,iBAA1B,KACjBP,MAAMa,GAAN,CAAUD,OAAON,MAAP,CAAV,EAA0BC,iBAA1B,EAA6C,IAAIO,KAAKC,cAAT,CAAwBT,MAAxB,EAAgCH,MAAhC,CAA7C,CADD;;AAGA;AACA,QAAO;AAAA,SAAQO,UAAUP,MAAV,CAAiBC,IAAjB,CAAR;AAAA,EAAP;AACA","file":"verboseDateFormatter.js","sourcesContent":["import\r\n{\r\n\tintlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale\r\n}\r\nfrom 'javascript-time-ago'\r\n\r\nimport Cache from 'javascript-time-ago/cache'\r\n\r\nconst cache = new Cache()\r\n\r\n/**\r\n * Creates verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\r\nexport default function createVerboseDateFormatter(locales, format)\r\n{\r\n\t// Fall back to `date.toString()` for old web browsers.\r\n\t// https://caniuse.com/#search=intl\r\n\tif (!intlDateTimeFormatSupported())\r\n\t{\r\n\t\treturn date => date.toString()\r\n\t}\r\n\r\n\t// If none of the `locales` are supported\r\n\t// a default system locale will be used.\r\n\tconst locale = intlDateTimeFormatSupportedLocale(locales)\r\n\r\n\t// `Intl.DateTimeFormat` format caching key.\r\n\t// E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\r\n\t// Didn't benchmark what's faster:\r\n\t// creating a new `Intl.DateTimeFormat` instance\r\n\t// or stringifying a small JSON `format`.\r\n\t// Perhaps strigifying JSON `format` is faster.\r\n\tconst formatFingerprint = JSON.stringify(format)\r\n\r\n\t// Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\r\n\t// (`locale` can be `undefined` therefore `String(locale)`)\r\n\tconst formatter = cache.get(String(locale), formatFingerprint) ||\r\n\t\tcache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format))\r\n\r\n\t// Return date formatter\r\n\treturn date => formatter.format(date)\r\n}"]}